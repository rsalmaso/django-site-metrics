==============
django-request
==============

django-request is a statistics module for django. It stores requests in a database for admins to see, it can also be used to get statistics on who is online etc.

First steps
-----------

    * :ref:`Installation <install>`
    * :ref:`Settings <settings>`
    * :ref:`Template tags <templatetags>`

Quick start guide
=================

Once you have installed ``django-request`` you can add it to a django project by following these steps;
    
	#. Install the blog app by adding ``'request'`` to
	   ``INSTALLED_APPS``.
           Put it before django.contrib.admin, otherwise you will not see the
           additional links in the admin panel.
	
	#. Run ``manage.py syncdb`` so that Django will create the database tables.
	
	#. Add ``request.middleware.RequestMiddleware`` to ``MIDDLEWARE_CLASSES``


.. note:

    If you use django.contrib.auth, it is important that the you place ``request.middleware.RequestMiddleware`` after ``django.contrib.auth.middleware.AuthenticationMiddleware``

.. note #2:
    Make sure that you got your domain name right in the Sites model.
    If it's not, the unique visits will not be calculated right, and top referers will not be shown correctly.

django-admin.py
===============

purgerequests
-------------

This command can be used to purge old requests, it takes two arguments amount and duration. Example:

.. code-block:: bash

    $ python manage.py purgerequests 1 month
    $ python manage.py purgerequests 2 weeks

It also has a option called ``--noinput``, if this is supplied, it will not ask you to confirm. With this option you can use this command in a cron.

Valid durations: ``days(s)``, ``week(s)``, ``month(s)``, ``year(s)``
